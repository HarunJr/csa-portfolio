import {
    Blockfrost, Lucid, Credential, TxHash, Lovelace, Constr, SpendingValidator, Data, fromText, toText, Unit, MintingPolicy,
    PolicyId, Address, UTxO, applyParamsToScript, Assets, ScriptHash, Redeemer, paymentCredentialOf, KeyHash,
    generatePrivateKey, getAddressDetails, toUnit, Datum,
} from 'lucid-cardano'
import { getMintingPolicy, getPolicyId, getUnit, savePolicyData, fetchMintingPolicy } from './minitng'
import initLucid from './lucid'
import { getBackendUsers, User, deleteUser, getMintData, MintData } from "../utils/backend";

const paramScriptCbor = ""

export const requestValidator = (lendPolicyId: PolicyId, borrowPolicyId: PolicyId) => {
    const Parameter = Data.Object({
        lenderNftCs: Data.Bytes(),
        borrowersNftCs: Data.Bytes(),
    });

    type Parameter = Data.Static<typeof Parameter>;

    const parameter: Parameter = {
        lenderNftCs: lendPolicyId,
        borrowersNftCs: borrowPolicyId,
    };

    const validator: SpendingValidator = {
        type: "PlutusV2",
        script: applyParamsToScript<[Parameter]>(paramScriptCbor, [parameter], Data.Tuple([Parameter]),)
    };
    return validator;
}

export const getValidatorsFromDB = async (): Promise<Address[]> => {
    try {
        const { mintsInfo }: { mintsInfo: MintData[] } = await getMintData();
        let validatorAddresses: Address[] = []; // Initialize an empty array to store the addresses
        if (mintsInfo) {
            for (const mint of mintsInfo) {
                validatorAddresses.push(mint.scriptAddress)
            }
        }
        return validatorAddresses;
    } catch (error) {
        console.error('getDatumFromContract: Error fetching datum:', error);
        return [];
    }

};

const mapDatumFields = (datum: any) => {
    return {
      borrowersNftTn: datum.fields[0].fields[0] || [],
      borrower: datum.fields[1].fields[0] || [],
      collateral: datum.fields[2].fields[0] || [],
      collateralAmnt: datum.fields[3].fields[0] || [],
      lenderNftTn: datum.fields[4].fields[0] || [],
      interest: datum.fields[5].fields[0] || [],
      interestAmnt: datum.fields[6].fields[0] || [],
      loan: {
        loanId: datum.fields[7].fields[0].fields[0] || [],
        loanName: datum.fields[7].fields[1].fields[0] || []
      },
      loanAmnt: datum.fields[8].fields[0] || [],
      requestExpiration: datum.fields[9].fields[0] || [],
      lendDate: datum.fields[10].fields[0] || [],
    };
  };

export const getScriptDatum = async (lucid: Lucid, contractAddress: Address) => {
    let datums: any[] = []; // Initialize an empty array to store the addresses
    // let allDatums: DatumI[][] = []; // Initialize an empty array to store all datums
    if (lucid) {
        const utxos = await lucid.utxosAt(contractAddress);
        let utxo : UTxO, utxoDatum, datumFields;

        if (utxos.length == 0) throw 'No UTxO available';
        for(let i = 0; i < utxos.length; i++){
            utxo = utxos[i];
            if(utxo.datumHash && !utxo.datum){
              utxo.datum = await lucid.datumOf(utxo);
            }
            utxoDatum = mapDatumFields(Data.from(utxo.datum!));
            console.log("datumFields: " + JSON.stringify(utxoDatum, null, 2));
            // console.log("datumName: " + toText(utxoDatum.borrowersNftTn));
            const datumJson = JSON.stringify(utxoDatum, null, 2);
            datums.push(datumJson);
        }
       
        console.log("allDatums: ", datums.length);
        return datums;
    }
};


const getValidatorAddress = async () => {
    const borrowName = fromText("BorrowNFT");
    const validatorData = await fetchMintingPolicy(borrowName);

    if (!validatorData || !validatorData.mintingPolicy) {
        console.log("validatorData: No Validator with that tokenName")
    }

    console.log("validatorData: " + validatorData)
    return validatorData.scriptAddress; // Return the accumulated string
}
